{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.jsx","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","trim","length","cats","type","list","placeholder","value","onChange","target","id","getGifs","category","a","url","fetch","resp","json","data","console","log","gifs","map","img","title","images","downsized_medium","url_origin","GifGridItem","props","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","role","index","href","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LA4CeA,EAzCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAiBvC,OACI,uBAAMC,UAAU,MAAMC,SAVL,SAACC,GAClBA,EAAEC,iBAEEL,EAAWM,OAAOC,OAAS,IAC3BT,GAAc,SAAAU,GAAI,MAAI,CAACR,MACvBC,EAAc,MAKlB,UACI,sBAAKC,UAAU,+BAAf,UACI,uBAAOO,KAAK,OAAOC,KAAK,OAAOR,UAAU,eAAeS,YAAY,sBAAsBC,MAAOZ,EAAYa,SAhB/F,SAACT,GACvBH,EAAcG,EAAEU,OAAOF,UAgBf,2BAAUG,GAAG,OAAb,UACI,wBAAQH,MAAM,UACd,wBAAQA,MAAM,WACd,wBAAQA,MAAM,cACd,wBAAQA,MAAM,WACd,wBAAQA,MAAM,gBAGtB,qBAAKV,UAAU,kBAAf,SACI,wBAAQA,UAAU,yCAAlB,8B,8BCjCHc,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,gDACkCF,EADlC,+DAEAG,MAAMD,GAFN,cAEbE,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAERC,QAAQC,IAAIF,GAENG,EAAOH,EAAKI,KAAI,SAAAC,GAClB,MAAO,CACHb,GAAIa,EAAIb,GACRc,MAAOD,EAAIC,MACXV,IAAKS,EAAIE,OAAOC,iBAAiBZ,IACjCa,WAAYJ,EAAIT,QAZL,kBAgBZO,GAhBY,4CAAH,sDCaLO,EAXK,SAACC,GACjB,OACI,sBAAKhC,UAAU,uEAAf,UACI,qBAAKiC,IAAKD,EAAMf,IAAKjB,UAAU,eAAekC,IAAI,iBAClD,qBAAKlC,UAAU,wBAAf,SACI,sBAAMA,UAAU,KAAhB,SAAsBgC,EAAML,cCgB7BQ,EAnBC,SAAC,GAAkB,IAAD,ECDN,SAACpB,GAAc,IAAD,EACZlB,mBAAS,CAC/BwB,KAAM,GACNe,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAkBtC,OAZAC,qBAAU,WACNzB,EAAQC,GACHyB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLjB,KAAMoB,EACNL,SAAS,MAEd,UAEZ,IAEIC,EDf2BM,CAFJ,EAAf5B,UAEDa,EAFgB,EAEtBP,KAAce,EAFQ,EAERA,QAEtB,OACI,qCACKA,GAAW,qBAAKpC,UAAU,2BAA2B4C,KAAK,SAA/C,SACR,sBAAM5C,UAAU,UAAhB,0BAIA4B,EAAOH,KAAI,SAACC,EAAKmB,GACb,OAAO,mBAAGC,KAAMpB,EAAII,WAAYlB,OAAO,SAAhC,SAAyC,cAAC,EAAD,eAA6Bc,GAAXmB,YEmBvEE,MA9Bf,WAAyB,IAAD,EAEgBlD,mBAAS,CAAC,UAF1B,mBAEbmD,EAFa,KAEDpD,EAFC,KAIpB,OACI,sBAAKI,UAAU,iBAAf,UAEI,oBAAIA,UAAU,iBAAd,uBACA,uBACA,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,cAAC,EAAD,CAAaJ,cAAeA,QAGpC,uBAEA,oBAAII,UAAU,oBAAd,SAAkC,sBAAMA,UAAU,mBAAhB,SAAoCgD,MAEtE,qBAAKhD,UAAU,eAAf,SAEQgD,EAAWvB,KAAK,SAAAV,GAAQ,OACpB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCpBtCkC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ca12e6ac.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue])\r\n            setInputValue(\"\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className=\"row\" onSubmit={handleSubmit}>\r\n            <div className=\"col-8 d-flex w-100 espaciado\">\r\n                <input type=\"text\" list=\"test\" className=\"form-control\" placeholder=\"Escribe tu busqueda\" value={inputValue} onChange={handleInputChange} />\r\n                <datalist id=\"test\">\r\n                    <option value=\"Gatos\" />\r\n                    <option value=\"Perros\" />\r\n                    <option value=\"Peliculas\" />\r\n                    <option value=\"Juegos\" />\r\n                    <option value=\"Memes\" />\r\n                </datalist>\r\n            </div>\r\n            <div className=\"col-4 espaciado\">\r\n                <button className=\"btn-block btn-dark h-100 border-radius\">Buscar gif</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default AddCategory\r\n","export const getGifs = async (category) => {\r\n    const url = `http://api.giphy.com/v1/gifs/search?q=${category}&limit=16&api_key=pH6Xy9jt2HfuPKrOpDs5NR0mODR8M69d`\r\n    const resp = await fetch(url)\r\n    const { data } = await resp.json()\r\n\r\n    console.log(data)\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url,\r\n            url_origin: img.url\r\n        }\r\n    })\r\n\r\n    return gifs\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = (props) => {\r\n    return (\r\n        <div className=\"card ancho-tarjeta shadow p-3 mb-3 bg-white rounded animacion-escala\" >\r\n            <img src={props.url} className=\"card-img-top\" alt=\"imagenes api\" />\r\n            <div className=\"card-body text-center\">\r\n                <span className=\"h5\">{props.title}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem'\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category) // despues de data se coloca : para renombrar\r\n\r\n    return (\r\n        <>\r\n            {loading && <div className=\"spinner-border text-info\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>}\r\n\r\n            {\r\n                images.map((img, index) => { //desestructuracion \r\n                    return <a href={img.url_origin} target='origin'><GifGridItem key={index} {...img} /></a>  //Igual que img = {img} envia cada una de las propiedades de la imagen\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setTimeout(() => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n                }, 500)\r\n            })\r\n    }, [])\r\n\r\n    return state\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid'\r\n\r\n\r\nfunction GifExpertApp() {\r\n\r\n    const [categories, setCategories] = useState(['Gatos'])\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            {/* <button className=\"btn btn-dark\" onClick={handleAdd} >Agregar</button> */}\r\n            <h2 className=\"titulo-fuente \">GifExpert</h2>\r\n            <br></br>\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <AddCategory setCategories={setCategories} />\r\n                </div>\r\n            </div>\r\n            <hr />\r\n\r\n            <h3 className=\"w-100 text-center\"><span className=\"badge badge-dark\">{categories}</span></h3>\r\n\r\n            <div className=\"card-columns\" >\r\n                {\r\n                    categories.map((category =>\r\n                        <GifGrid key={category} category={category} />\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GifExpertApp from './GifExpertApp';\r\nimport './index.css'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GifExpertApp />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}